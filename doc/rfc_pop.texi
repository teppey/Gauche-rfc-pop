@c ----------------------------------------------------------------------
@node POP, Library modules - Utilities
@section @code{rfc.pop} - POP3 client module

@deftp {Module} rfc.pop
@mdindex rfc.pop
@c EN
This module provides a client API for POP3, defined in RFC1939.
@c JP
このモジュールは、RFC1939に定められたPOP3プロトコルのクライアントAPIを提供します。
@c COMMON

Post Office Protocol - Version 3
[RFC1939] http://www.ietf.org/rfc/rfc1939.txt

@end deftp

@deftp {Condition Type} <pop3-error>
@clindex pop3-error
@c EN
The base class of @code{pop3}-related conditions. Inherits @code{<error>}.
@c JP
このコンディションはサーバーからエラー応答を受け取ったときに投げられます。@code{<error>}を継承しています。
@c COMMON
@end deftp

@deftp {Class} <pop3-connection>
@clindex pop3-connection
@c EN
An object to keep POP3 connection to server. It has the following public
slots.
@c JP
POP3サーバーへの接続を保持するオブジェクト。以下の公開スロットがあります。
@c COMMON

@defivar {<pop3-connection>} host
@c EN
Hostname of POP3 server.
@c JP
POP3サーバーのホスト名。
@c COMMON
@end defivar

@defivar {<pop3-connection>} port
@c EN
Port number of POP3 server. The default value is 110.
@c JP
POP3サーバーのポート番号。デフォルトでは110です。
@c COMMON
@end defivar

@end deftp

@defun call-with-pop3-connection host username password proc &keyword apop
@c EN
It connects with the POP3 server, it attests, and proc is called with
@code{<pop3-connection>} object. The connected server is specified for
@var{host}. The port number can ``@code{@var{hostname}:@var{port}}'' be
specified by the form.

@var{username} and @var{password} are the names of the user and passwords
used for the attestation. It is attested that the true value is passed to
keyword argument apop by the APOP method.

If pop3 connection to @var{host} is established successfully, @var{proc} is
called with one argument, which is an instance of @code{<pop3-connection>}.
This connection is closed when returning from @var{proc}, and the return value
of @var{proc} is returned from @code{call-with-pop3-connection}.

The example of preserving mail in the local file by using this procedure is
shown.
@c JP
POP3サーバーに接続して認証を行い、@code{<pop3-connection>}オブジェクトととも
に @var{proc}を呼びます。@var{host}には接続するサーバーを指定します。
@code{@var{hostname}:@var{port}}という形式でポート番号を指定することができます。

@var{username}、@var{password}は認証に使用するユーザー名とパスワードです。キー
ワード引数@var{apop}に真の値が渡されるとAPOP方式で認証を行います。

@var{host}への接続が確立すると、@var{proc}が@code{<pop3-connection>}オブジェ
クトを引数にして呼ばれます。@var{proc}から返ったときこのコネクションはクロー
ズされ、@var{proc}の戻り値が@code{call-with-pop3-connection}から返されます。

この手続きを使用してメールをローカルファイルに保存する例を示します。
@c COMMON

@example
(call-with-pop3-connection "pop.example.com" "username" "password"
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (with-output-to-file #`"./inbox/,num"
                    (lambda ()
                      (display (pop3-retr conn num))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example

@end defun

@deffn {Method} pop3-connect (conn <pop3-connection>)
@c EN
It connects with a remote server, and the response string is returned.
@c JP
リモートサーバーに接続し、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-quit (conn <pop3-connection>)
@c EN
The @code{QUIT} command is sent to a remote server, shutdown the connection.
@c JP
@code{QUIT}コマンドをリモートサーバーに送り、コネクションをシャットダウンします。
@c COMMON
@end deffn

@c EN
The following methods implement the command of the POP3 protocol. In many
cases, return value is response string from the server.
@c JP
以下のメソッドはPOP3プロトコルのコマンドを実装します。多くの場合サーバーから
のレスポンスを文字列で返します。
@c COMMON

@deffn {Method} pop3-user (conn <pop3-connection>) username
@c EN
Sends @code{USER} command with @var{username} to the server, and the
response string is returned.
@c JP
USERコマンドを@var{username}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-pass (conn <pop3-connection>) password
@c EN
Sends @code{PASS} command with @var{password} to the server, and the
response string is returned.
@c JP
PASSコマンドを@var{password}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-apop (conn <pop3-connection>) username password
@c EN
Login to the server by @code{APOP} method.
If login failure, @code{<pop3-authentication-error} is generated.
@c JP
APOP方式でサーバーにログインします。
ログインに失敗すると@code{<pop3-authentication-error>}コンディションが発生します。
@c COMMON
@end deffn

@deffn {Method} pop3-stat (conn <pop3-connection>)
@c EN
Return two values, its number of mails on the server and those total size.
@c JP
サーバ上のメール数とそれらの合計サイズの2つの値を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-retr (conn <pop3-connection>) msgnum &keyword sink flusher
@c EN
The content of the mail of the @var{msgnum} turn is sent to output port
@var{sink}. It is The procedure given by @var{flusher} calls @var{sink} as an
argument after all data is sent to @var{sink}, and the return value returns it
from @code{pop3-retr}

The default value of sink and flusher are newly created string port and
@code{get-output-string}, respectively.  That is, @code{pop3-retr} return
the content of the mail as a string by default. When the size of mail is
large, this behavior might become a problem.

The following samples preserve the content of mail directly in the file.
@c JP
メッセージ番号@var{msgnum}のメールの内容を出力ポート@var{sink}に送ります。す
べてのデータが@var{sink}に 送られたあと、@var{flusher}で与えられた手続きを
@var{sink}を引数として呼び、その戻り値 が@code{pop3-retr}から返されます。

@var{sink}および@var{flusher}のデフォルト値はそれぞれ、新しく作成された文字
列ポートと @code{get-output-string}です。すなわち、@code{pop3-retr}はデフォ
ルトではメールの内容を 文字列として返します。この挙動はメールのサイズが大き
い場合に問題となるかもしれません。

以下の例ではメールの内容を直接ファイルに保存します。
@c COMMON
@example
(call-with-pop3-connection host user pass
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (call-with-output-file #`"./inbox/,num"
                    (lambda (out)
                      (pop3-retr conn num :sink out :flusher (lambda _ #t))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example
@end deffn

@deffn {Method} pop3-top (conn <pop3-connection>) msgnum nlines &keyword sink flusher
@c EN
Another from whom only @var{nlines} acquires the content of mail is the same
as @code{pop3-retr}. When @var{nlines} is larger than the number of lines
of the text, the entire mail is acquired.
@c JP
メールの本文を@var{nlines}のみ取得する他は@code{pop3-retr}と同じです。
@var{nlines}が本文の行数よりも大きい場合、メール全体を取得します。
@c COMMON
@end deffn

@deffn {Method} pop3-dele (conn <pop3-connection>) msgnum
@c EN
The flag to delete the mail of the @var{msgnum} turn is hoisted. A deletion
actual until the connection is cut by @code{pop3-quit} is not done.
@c JP
メッセージ番号@var{msgnum}のメールを削除するフラグを立てます。
@code{pop3-quit}によってコネクションが切断されるまで実際の削除は行われません。
@c COMMON
@end deffn

@deffn {Method} pop3-noop (conn <pop3-connection>)
@c EN
Sends @code{NOOP} command to the remote server.
It is used to keep the connection though it collects and nothing is done.
@c JP
NOOPコマンドをリモートサーバーに送ります。
何もしませんが、接続を維持するために使われます。
@c COMMON
@end deffn

@deffn {Method} pop3-rset (conn <pop3-connection>)
@c EN
All the deletion flags are canceled.
@c JP
削除フラグをすべて取り消します。
@c COMMON
@end deffn

@deffn {Method} pop3-list (conn <pop3-connection>) &optional msgnum
@c EN
When optional argument @var{msgnum} is specified, the size of the mail of
the @var{msgnum} turn is returned. When the argument is omitted, the
association list of the mail number and the size of mail is returned. Mail
to which the deletion flag is applied is not included in this list.
@c JP
省略可能な引数@var{msgnum}が指定された場合は、メッセージ番号@var{msgnum}のメー
ルのサイズを返します。引数が省略された場合はメッセージ番号とサイズの連想リス
トを返します。このリストには削除フラグのつけられたメールは含まれません。
@c COMMON
@end deffn

@deffn {Method} pop3-uidl (conn <pop3-connection>) &optional msgnum
@c EN
When optional argument @var{msgnum} is specified, unique ID that uniquely
identifies the mail of the @var{msgnum} turn on the server is returned.
When the argument is omitted, the association list of the mail number and
unique ID is returned. Unique ID is not changed even if it connects it again
unlike the mail number.
@c JP
省略可能な引数@var{msgnum}が指定された場合、メッセージ番号@var{msgnum}のメー
ルをサーバー上で一意に識別するユニークIDを返します。引数が省略された場合はメッ
セージ番号とユニークIDの連想リストが返されます。ユニークIDはメッセージ番号と
違い、接続しなおしても変化しません。
@c COMMON
@end deffn
