@c ----------------------------------------------------------------------
@node POP3, Library modules - Utilities
@section @code{rfc.pop3} - POP3 client module

@deftp {Module} rfc.pop3
@mdindex rfc.pop3
@c EN
This module provides a client API for POP3, defined in RFC1939 ``Post Office Protocol version 3''
@c JP
このモジュールはRFC1939で定義されているPOP3プロトコル(Post Office Protocol - Version 3)のクライアントAPIを提供します。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-error>
@clindex pop3-error
@c EN
The base class of @code{pop3}-related conditions. Inherits @code{<error>}.
@c JP
pop3-関連のコンディションのベースクラス。@code{<error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-timeout-error>
@clindex pop3-timeout-error
@c EN
This condition raise when there is no reponse from the server during the
fixed time. Inherits @code{<pop3-error>}.
@c JP
このコンディションはサーバーからの応答が一定時間なかった場合に発生します。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-authentication-error>
@clindex pop3-authentication-error
@c EN
When the authentication by the server fails, this condition is thrown.
Inherits @code{<pop3-error>}.
@c JP
サーバーでの認証が失敗したときにこのコンディションが投げられます。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-bad-response-error>
@clindex pop3-bad-response-error
@c EN
It is a condition generated when the error response is received from the server.
The response is stored in the @code{message} slot.
Inherits @code{<pop3-error>}.
@c JP
サーバーからエラーレスポンスを受け取った場合に発生するコンディションです。レ
スポンスは@code{message}スロットに格納されています。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Class} <pop3-connection>
@clindex pop3-connection
@c EN
An object to keep POP3 connection to server. It has the following public
slots.
@c JP
POP3サーバーへの接続を保持するオブジェクト。以下の公開スロットがあります。
@c COMMON

@defivar {<pop3-connection>} host
@c EN
Hostname of POP3 server.
@c JP
POP3サーバーのホスト名。
@c COMMON
@end defivar

@defivar {<pop3-connection>} port
@c EN
Port number of POP3 server. The default value is 110.
@c JP
POP3サーバーのポート番号。デフォルトでは110番です。
@c COMMON
@end defivar

@defivar {<pop3-connection>} timeout
@c EN
Maximum seconds for connection waiting. If it is not possible to connect it
even if this number of seconds passes, @code{<pop3-timeout-error>} condition
is generated.
The default value is 30 seconds.
@c JP
接続時に待つ最大秒数。この秒数が経過しても接続できなければ
@code{<pop3-timeout-error>}コンディションが発生します。
デフォルトでは30秒です。
@c COMMON
@end defivar
@end deftp

@defun call-with-pop3-connection host username password proc &keyword apop
@c EN
It connects with the POP3 server, it attests, and proc is called with
@code{<pop3-connection>} object. The connected server is specified for
@var{host}. The port number can ``@code{@var{hostname}:@var{port}}'' be
specified by the form.

@var{username} and @var{password} are the names of the user and passwords
used for the attestation. It is attested that the true value is passed to
keyword argument apop by the APOP method.

If pop3 connection to @var{host} is established successfully, @var{proc} is
called with one argument, which is an instance of @code{<pop3-connection>}.
This connection is closed when returning from @var{proc}, and the return value
of @var{proc} is returned from @code{call-with-pop3-connection}.

The example of preserving mail in the local file by using this procedure is
shown.
@c JP
POP3サーバーに接続して認証を行い、@code{<pop3-connection>}オブジェクトととも
に @var{proc}を呼びます。@var{host}には接続するサーバーを指定します。
@code{@var{hostname}:@var{port}}と いう形式でポート番号を指定することができ
ます。

@var{username}、@var{password}は認証に使用するユーザー名とパスワードです。キー
ワード引数@var{apop}に真の値が渡されるとAPOP方式で認証を行います。

@var{host}への接続が確立すると、@var{proc}が@code{<pop3-connection>}オブジェ
クトを引数にして呼ばれます。@var{proc}から返ったときこのコネクションはクロー
ズされ、@var{proc}の戻り値が@code{call-with-pop3-connection}から返されます。

この手続きを使用してメールをローカルファイルに保存する例を示します。
@c COMMON
@example
(define pop-host "pop.example.com")
(define pop-user "username")
(define pop-pass "password")

(call-with-pop3-connection pop-host pop-user pop-pass
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (with-output-to-file #`"./inbox/,num"
                    (lambda ()
                      (display (pop3-retr conn num))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example
@end defun

@deffn {Method} pop3-connect (conn <pop3-connection>)
@c EN
It connects with a remote server, and the response string is returned.
@c JP
リモートサーバーに接続し、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-quit (conn <pop3-connection>)
@c EN
The @code{QUIT} command is sent to a remote server, shutdown the connection.
@c JP
@code{QUIT}コマンドをリモートサーバーに送り、コネクションをシャットダウンします。
@c COMMON
@end deffn

@c EN
The following methods implement the command of the POP3 protocol. In many
cases, return value is response string from the server.
@c JP
以下のメソッドはPOP3プロトコルのコマンドを実装します。多くの場合サーバーから
のレスポンスを文字列で返します。
@c COMMON

@deffn {Method} pop3-user (conn <pop3-connection>) username
@c EN
Sends @code{USER} command with @var{username} to the server, and the
response string is returned.
@c JP
USERコマンドを@var{username}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-pass (conn <pop3-connection>) password
@c EN
Sends @code{PASS} command with @var{password} to the server, and the
response string is returned.
@c JP
PASSコマンドを@var{password}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-login (conn <pop3-connection>) username password
@c EN
Login to the server by using @code{pop3-user} and @code{pop3-pass}.
If login failure, @code{<pop3-authentication-error} is generated.
@c JP
@code{pop3-user}と@code{pop3-pass}を使用してサーバーにログインします。
ログインに失敗すると@code{<pop3-authentication-error>}コンディションが発生します。
@c COMMON
@end deffn

@deffn {Method} pop3-apop (conn <pop3-connection>) username password
@c EN
Login to the server by @code{APOP} method.
If login failure, @code{<pop3-authentication-error} is generated.
@c JP
APOP方式で使用してサーバーにログインします。
ログインに失敗すると@code{<pop3-authentication-error>}コンディションが発生します。
@c COMMON
@end deffn

@deffn {Method} pop3-stat (conn <pop3-connection>)
@c EN
Return two values, its number of mails on the server and those total size.
@c JP
サーバ上のメール数とそれらの合計サイズの2つの値を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-retr (conn <pop3-connection>) msgnum &keyword flusher
@c EN
The content of the mail of the @var{msgnum} turn is sent to output port
@var{sink}. It is The procedure given by @var{flusher} calls @var{sink} as an
argument after all data is sent to @var{sink}, and the return value returns it
from @code{pop3-retr}

The default value of sink and flusher are newly created string port and
@code{get-output-string}, respectively.  That is, @code{pop3-retr} return
the content of the mail as a string by default. Because the string buffer
corresponding to the size is made as for this behavior when the size of
mail is large, it is likely to become a problem.

The following samples preserve the content of mail directly in the file.
@c JP
@var{msgnum}番のメールの内容を出力ポート@var{sink}に送ります。すべてのデー
タが@var{sink}に 送られたあと、@var{flusher}で与えられた手続きを@var{sink}を
引数として呼び、その戻り値 が@code{pop3-retr}から返されます。

@var{sink}および@var{flusher}のデフォルト値はそれぞれ、新しく作成された文字
列ポートと @code{get-output-string}です。すなわち、@code{pop3-retr}はデフォ
ルトではメールの内容を 文字列として返します。この挙動はメールのサイズが大き
い場合、そのサイズに応 じた文字列バッファが作られるため、問題となるかもしれ
ません。

以下の例はメールの内容を直接ファイルに保存します。
@c COMMON
@example
(call-with-pop3-connection host user pass
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (call-with-output-file #`"./inbox/,num"
                    (lambda (out)
                      (pop3-retr conn num :sink out :flusher (lambda _ #t))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example
@end deffn

@deffn {Method} pop3-top (conn <pop3-connection>) msgnum nlines &keyword sink flusher
@c EN
Another from whom only @var{nlines} acquires the content of mail is the same
as @code{pop3-retr}. When @var{nlines} is larger than the number of lines
of the text, the entire mail is acquired.
@c JP
メールの本文を@var{nlines}のみ取得する他は@code{pop3-retr}と同じです。
@var{nlines}が本文の行数よりも大きい場合、メール全体を取得します。
@c COMMON
@end deffn

@deffn {Method} pop3-dele (conn <pop3-connection>) msgnum
@c EN
The flag to delete the mail of the @var{msgnum} turn is hoisted. A deletion
actual until the connection is cut by @code{pop3-quit} is not done.
@c JP
@var{msgnum}番のメールを削除するフラグを立てます。@code{pop3-quit}によっ
てコネクションが切断されるまで実際の削除は行われません。
@c COMMON
@end deffn

@deffn {Method} pop3-noop (conn <pop3-connection>)
@c EN
Sends @code{NOOP} command to the remote server.
It is used to keep the connection though it collects and nothing is done.
@c JP
NOOPコマンドをリモートサーバーに送ります。
とりたてて何もしませんが、接続を維持するために使われます。
@c COMMON
@end deffn

@deffn {Method} pop3-rset (conn <pop3-connection>)
@c EN
All the deletion flags are canceled.
@c JP
削除フラグをすべて取り消します。
@c COMMON
@end deffn

@deffn {Method} pop3-list (conn <pop3-connection>) &optional msgnum
@c EN
When optional argument @var{msgnum} is specified, the mail number of
the @var{msgnum} turn and two size values are returned. When the argument is
omitted, the list of the association of the mail number and the size of
mail in the server is returned. E-mail that the deletion flag is
applied to this list is not included. 
@c JP
省略可能な引数@var{msgnum}が指定された場合は、@var{msgnum}番のメール番号およ
びサイズの2つの値を返します。引数が省略された場合は、サーバー上のメールの番
号とサイズの連想リストを返します。このリストに削除フラグのつけられたメールは
含まれません。
@c COMMON
@end deffn

@deffn {Method} pop3-uidl (conn <pop3-connection>) &optional msgnum
@c EN
@c JP
省略可能な引数@var{msgnum}が指定された場合、@var{msgnum}および@var{msgnum}番
のメールをサーバー上で一意に識別するユニークIDの2つの値を返します。引数が省
略された場合はメール番号とユニークIDの連想リストが返されます。
@c COMMON
@end deffn
