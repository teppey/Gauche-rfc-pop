@c ----------------------------------------------------------------------
@node POP3, Library modules - Utilities
@section @code{rfc.pop3} - POP3 client module

@deftp {Module} rfc.pop3
@mdindex rfc.pop3
@c EN
This module provides a client API for POP3, defined in RFC1939 ``Post Office Protocol version 3''
@c JP
このモジュールはRFC1939で定義されているPOP3プロトコル(Post Office Protocol - Version 3)のクライアントAPIを提供します。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-error>
@clindex pop3-error
@c EN
@c JP
pop3-関連のコンディションのベースクラス。@code{<error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-timeout-error>
@clindex pop3-timeout-error
@c EN
@c JP
このコンディションはサーバーからの応答が一定時間なかった場合に発生します。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-authentication-error>
@clindex pop3-authentication-error
@c EN
@c JP
サーバーでの認証が失敗したときにこのコンディションが投げられます。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Condition Type} <pop3-bad-response-error>
@clindex pop3-bad-response-error
@c EN
@c JP
サーバーからエラーレスポンスを受け取った場合に発生するコンディションです。
レスポンスはmessageスロットに格納さrています。
@code{<pop3-error>}を継承しています。
@c COMMON
@end deftp

@deftp {Class} <pop3-connection>
@clindex pop3-connection
@c EN
@c JP
POP3サーバーへの接続を保持するオブジェクト。以下の公開スロットがあります。
@c COMMON

@defivar {<pop3-connection>} host
@c EN
@c JP
POP3サーバーのホスト名。
@c COMMON
@end defivar

@defivar {<pop3-connection>} port
@c EN
@c JP
POP3サーバーのポート番号。デフォルトでは110番です。
@c COMMON
@end defivar

@defivar {<pop3-connection>} timeout
@c EN
@c JP
接続時に待つ最大秒数。この秒数が経過しても接続できなければ@code{<pop3-timeout-error>}コンディションが発生します。
デフォルトでは30秒に設定されています。
@c COMMON
@end defivar
@end deftp

@defun call-with-pop3-connection host username password proc &keyword apop
@c EN
@c JP
POP3サーバーに接続して認証を行い、@code{<pop3-connection>}オブジェクトとともに
@var{proc}を呼びます。@var{host}には接続するサーバーを指定します。@code{@var{hostname}:@var{port}}と
いう形式でポート番号を指定することができます。

@var{username}、@var{password}は認証に使用するユーザー名とパスワードです。キー
ワード引数@var{apop}に真の値が渡されるとAPOP方式で認証を行います。

@var{host}への接続が確率したら、@var{proc}が@code{<pop3-connection>}オブジェ
クトを引数にして呼ばれます。@var{proc}から返ったときこのコネクションはクロー
ズされ、@var{proc}の戻り値が@code{call-with-pop3-connection}から返されます。

この手続きを使用してメールをローカルファイルに保存する例を示します。

@c COMMON
@example
(define pop-host "pop.example.com")
(define pop-user "username")
(define pop-pass "password")

(call-with-pop3-connection pop-host pop-user pop-pass
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (with-output-to-file #`"./inbox/,num"
                    (lambda ()
                      (display (pop3-retr conn num))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example
@end defun

@deffn {Method} pop3-connect (conn <pop3-connection>)
@c EN
@c JP
リモートサーバーに接続し、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-quit (conn <pop3-connection>)
@c EN
@c JP
QUITコマンドをリモートサーバーに送り、コネクションを切断します。
@c COMMON
@end deffn

@c EN
@c JP
以下のメソッドはPOP3プロトコルのコマンドを実装します。多くの場合サーバーから
のレスポンスを文字列で返します。
@c COMMON

@deffn {Method} pop3-user (conn <pop3-connection>) username
@c EN
@c JP
USERコマンドを@var{username}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-pass (conn <pop3-connection>) password
@c EN
@c JP
PASSコマンドを@var{password}とともにサーバーに送り、レスポンス文字列を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-login (conn <pop3-connection>) username password
@c EN
@c JP
@code{pop3-user}と@code{pop3-pass}を使用してサーバーにログインします。
ログインに失敗すると@code{<pop3-authentication-error>}コンディションが発生します。
@c COMMON
@end deffn

@deffn {Method} pop3-apop (conn <pop3-connection>) username password
@c EN
@c JP
APOPコマンドを使用してサーバーにログインします。
ログインに失敗すると@code{<pop3-authentication-error>}コンディションが発生します。
@c COMMON
@end deffn

@deffn {Method} pop3-stat (conn <pop3-connection>)
@c EN
@c JP
サーバ上のメール数とそれらの合計サイズの2つの値を返します。
@c COMMON
@end deffn

@deffn {Method} pop3-retr (conn <pop3-connection>) msgnum &keyword flusher
@c EN
@c JP
@var{msgnum}番のメールの内容を出力ポート@var{sink}に出力します。すべてのデー
タが@var{sink}に 送られたあと、@var{flusher}で与えられた手続きを@var{sink}を
引数として呼び、その戻り値 が@code{pop3-retr}から返されます。

@var{sink}および@var{flusher}のデフォルト値はそれぞれ、新しく作成された文字
列ポートと @code{get-output-string}です。すなわち、@code{pop3-retr}はデフォ
ルトではメールの内容を 文字列として返します。この挙動はメールのサイズが大き
い場合、そのサイズに応 じた文字列バッファが作られるため、問題となるかもしれ
ません。

以下のサンプルはメールの内容を直接ファイルに保存します。

@c COMMON

@example
(call-with-pop3-connection host user pass
  (lambda (conn)
    (for-each (lambda (pair)
                (let1 num (car pair)
                  (call-with-output-file #`"./inbox/,num"
                    (lambda (out)
                      (pop3-retr conn num :sink out :flusher (lambda _ #t))))
                  (pop3-dele conn num)))
              (pop3-list conn))))
@end example
@end deffn

@deffn {Method} pop3-top (conn <pop3-connection>) msgnum nlines &keyword sink flusher
@c EN
@c JP
メールの本文を@var{nlines}のみ取得する他は@code{pop3-retr}と同じです。
@var{nlines}が本文の 行数よりも大きい場合、メール全体を取得します。
@c COMMON
@end deffn

@deffn {Method} pop3-dele (conn <pop3-connection>) msgnum
@c EN
@c JP
@var{msgnum}番のメールを削除するためのフラグを立てます。@code{pop3-quit}によっ
てコネク ションが切断されるまで実際の削除は行われません。
@c COMMON
@end deffn

@deffn {Method} pop3-noop (conn <pop3-connection>)
@c EN
@c JP
NOOPコマンドをリモートサーバーに送ります。
とりたてて何もしませんが、接続を維持するために使われます。
@c COMMON
@end deffn

@deffn {Method} pop3-rset (conn <pop3-connection>)
@c EN
@c JP
削除フラグをすべて取り消します。
@c COMMON
@end deffn

@deffn {Method} pop3-list (conn <pop3-connection>) &optional msgnum
@c EN
@c JP
省略可能な引数@var{msgnum}が指定された場合は、@var{msgnum}番のメール番号およ
びサイズの2つの値を返します。引数が省略された場合は、サーバー上のメールの番
号とサイズの連想リストを返します。このリストに削除フラグのつけられたメールは
含まれません。
@c COMMON
@end deffn

@deffn {Method} pop3-uidl (conn <pop3-connection>) &optional msgnum
@c EN
@c JP
省略可能な引数@var{msgnum}が指定された場合、@var{msgnum}および@var{msgnum}番
のメールをサーバー上で一意に識別するユニークIDの2つの値を返します。引数が省
略された場合はメール番号とユニークIDの連想リストが返されます。
@c COMMON
@end deffn
